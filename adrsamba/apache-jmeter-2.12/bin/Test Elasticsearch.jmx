<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Elasticsearch" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${thread}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUp}</stringProp>
        <longProp name="ThreadGroup.start_time">1428084290000</longProp>
        <longProp name="ThreadGroup.end_time">1428084290000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ES_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${ES_PORT}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="thread" elementType="Argument">
              <stringProp name="Argument.name">thread</stringProp>
              <stringProp name="Argument.value">${__property(THREAD,THREAD)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="rampUp" elementType="Argument">
              <stringProp name="Argument.name">rampUp</stringProp>
              <stringProp name="Argument.value">$0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loop" elementType="Argument">
              <stringProp name="Argument.name">loop</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ES_HOST" elementType="Argument">
              <stringProp name="Argument.name">ES_HOST</stringProp>
              <stringProp name="Argument.value">${__property(ES_HOST,ES_HOST)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ES_PORT" elementType="Argument">
              <stringProp name="Argument.name">ES_PORT</stringProp>
              <stringProp name="Argument.value">${__property(ES_PORT,ES_PORT)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ES_INDEX" elementType="Argument">
              <stringProp name="Argument.name">ES_INDEX</stringProp>
              <stringProp name="Argument.value">${__property(ES_INDEX,ES_INDEX)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ES_TYPE" elementType="Argument">
              <stringProp name="Argument.name">ES_TYPE</stringProp>
              <stringProp name="Argument.value">${__property(ES_TYPE,ES_TYPE)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="JSONTEMPLATE_ROOT" elementType="Argument">
              <stringProp name="Argument.name">JSONTEMPLATE_ROOT</stringProp>
              <stringProp name="Argument.value">${__property(JSONTEMPLATE_ROOT,JSONTEMPLATE_ROOT)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CSVDATA_ROOT" elementType="Argument">
              <stringProp name="Argument.name">CSVDATA_ROOT</stringProp>
              <stringProp name="Argument.value">${__property(CSVDATA_ROOT,CSVDATA_ROOT)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PAGE_QUERY" elementType="Argument">
              <stringProp name="Argument.name">PAGE_QUERY</stringProp>
              <stringProp name="Argument.value">${__FileToString($JSONTEMPLATE_ROOT}/page.json,UTF-8,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PAGE_GEO_QUERY" elementType="Argument">
              <stringProp name="Argument.name">PAGE_GEO_QUERY</stringProp>
              <stringProp name="Argument.value">${__FileToString($JSONTEMPLATE_ROOT}/page_geo.json,UTF-8,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PAGE_GEO_DATES_QUERY" elementType="Argument">
              <stringProp name="Argument.name">PAGE_GEO_DATES_QUERY</stringProp>
              <stringProp name="Argument.value">${__FileToString($JSONTEMPLATE_ROOT}/page_geo_dates.json.UTF-8,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${CSVDATA_ROOT}/pages.csv</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
